#   Unit "timefrequencybi" of the FourierAnalysis Package for julia language
#
#   MIT License
#   Copyright (c) 2019-2025,
#   Marco Congedo, CNRS, Grenobe, France:
#   https://sites.google.com/site/marcocongedo/home

# ? CONTENTS :
#   This unit implements time-frequency bivariate measure based
#   on timefrequency.jl and tools.jl


################### BIVARIATE MEASURE ##########################
# see Congedo(2018): https://hal.archives-ouvertes.fr/hal-01868538v2/document

"""
```julia
(1)
function comodulation( ùêÄ‚ÇÅ     :: TFAmplitudeVector,
                       ùêÄ‚ÇÇ     :: TFAmplitudeVector,
                       frange :: fInterval,
                       trange :: tInterval;
                  mode  :: Function = extract,
                  func  :: Function = identity,
                  w     :: Vector = [],
                  check :: Bool   = true) =

(2)
function comodulation( ùêô‚ÇÅ     :: TFAnalyticSignalVector,
                       ùêô‚ÇÇ     :: TFAnalyticSignalVector,
    < arguments frange, trange, mode, func, w and check as in method (1) >

(3)
function comodulation(ùê±‚ÇÅ        :: Vector{Vector{T}},
                      ùê±‚ÇÇ        :: Vector{Vector{T}},
                      sr        :: Int,
                      wl        :: Int,
                      frange    :: fInterval,
                      trange    :: tInterval,
                      bandwidth :: IntOrReal    = 2;
                mode            :: Function     = extract,
                func            :: Function     = identity,
                w               :: Vector       = [],
                filtkind        :: FilterDesign = Butterworth(2),
                fmin            :: IntOrReal    = bandwidth,
                fmax            :: IntOrReal    = sr√∑2,
                fsmoothing      :: Smoother     = noSmoother,
                tsmoothing      :: Smoother     = noSmoother,
                planner         :: Planner      = getplanner,
                ‚è©             :: Bool         = true) where T<:Real

```
**alias**: com

(1)

Given a pair of [TFAmplitudeVector](@ref) objects, estimate their
[(weighted) comodulation](@ref) measure. `ùêÄ‚ÇÅ` and `ùêÄ‚ÇÇ` must hold the
same number of objects and the time-frequency planes
of all the objects should be congruent.

**arguments**:

`frange` and `trange` have the same meaning
as in the [`meanAmplitude`](@ref) method.

**optional keyword arguments**

`mode`, `func` and `check` have the same meaning
as in the [`meanAmplitude`](@ref) method.

`w` may be a vector of non-negative real weights associated to
each pair of input objects. By default the unweighted version of the measure
is computed.

(2)

Given a pair of [TFAnalyticSignalVector](@ref) object,
compute the amplitude of all objects and estimate the
[(weighted) comodulation](@ref) as per method (1).
Like in method (1), `ùêô‚ÇÅ` and `ùêô‚ÇÇ` must hold the same number of objects and
the time-frequency planes of all the objects should be congruent.
In addition, since using this method all [TFAnalyticSignal](@ref) objects
in `ùêô‚ÇÅ` and `ùêô‚ÇÇ` must be `linear`,
if `check` is true (default) and this is not the case,
print an error and return `Nothing`. The checks on `frange` and `trange`
performed by method (1) are also performed by this method.

(3)

Estimate the amplitude of all data vectors in `ùê±‚ÇÅ` and `ùê±‚ÇÇ` calling the
[`TFamplitude`](@ref) constructor and then estimate the
[(weighted) comodulation](@ref) measure across the constructed
amplitude objects as per method (1).

`frange`, `trange`, `mode`, `func`, `w` and `check` have the same meaning as
in method (1). The other arguments are passed to the
[`TFamplitude`](@ref) constructors, to which the reader is referred
for their meaning.

If a `planner` for FFT computations is not provided, it is computed once
and applied for all amplitude estimations.

**See also**: [`coherence`](@ref), [timefrequencybi.jl](@ref).

**Examples**:
```julia
using FourierAnalysis

# generate 100 pairs of data vectors
sr, t, bandwidth=128, 512, 2
h=taper(harris4, t)
ùê±‚ÇÅ=[sinusoidal(2, 10, sr, t, 0).*h.y+randn(t) for i=1:100]
ùê±‚ÇÇ=[sinusoidal(2, 10, sr, t, 0).*h.y+randn(t) for i=1:100]

# compute their (linear) analytic signal
ùêò‚ÇÅ=TFanalyticsignal(ùê±‚ÇÅ, sr, wl, bandwidth; fmax=32, nonlinear=false)
ùêò‚ÇÇ=TFanalyticsignal(ùê±‚ÇÇ, sr, wl, bandwidth; fmax=32, nonlinear=false)

# compute their amplitude
ùêÄ‚ÇÅ=TFamplitude(ùêò‚ÇÅ)
ùêÄ‚ÇÇ=TFamplitude(ùêò‚ÇÇ)

# compute the Com averaging in a TF region from TFAnalyticSignal objects
# ùêò‚ÇÅ and ùêò‚ÇÇ must be linear
Com=comodulation(ùêò‚ÇÅ, ùêò‚ÇÇ, (8, 12), :; mode=mean)

# compute the Com averaging in a TF region from TFAmplitudeVector objects
# ùêÄ‚ÇÅ and ùêÄ‚ÇÇ must be linear
Com=comodulation(ùêÄ‚ÇÅ, ùêÄ‚ÇÇ, (8, 12), :; mode=mean)

# compute the Com averaging in a TF region directly from data
# In this case you don't have to worry about linearity
Com=comodulation(ùê±‚ÇÅ, ùê±‚ÇÇ, sr, wl, (8, 12), :, bandwidth; mode=mean)

# compute comodulation from smoothed amplitude:
Com=comodulation(ùê±‚ÇÅ, ùê±‚ÇÇ, sr, wl, (8, 12), :, bandwidth;
                 mode=mean,
                 fsmoothing=blackmanSmoother,
                 tsmoothing=blackmanSmoother)

# you can go faster pre-computing a FFTW plan.
# This is useful when you have to call the comodulation function several times
plan=Planner(plan_patient, 5, wl, Float64, true)
Com=comodulation(ùê±‚ÇÅ, ùê±‚ÇÇ, sr, wl, (8, 12), :, bandwidth; mode=mean, planner=plan)

# compute the Com in a TF region from TFAnalyticSignalVector objects
Com=comodulation(ùêò‚ÇÅ, ùêò‚ÇÇ, (8, 12), :; mode=extract)

# compute the Com in a TF region from TFAmplitudeVector objects
Com=comodulation(ùêÄ‚ÇÅ, ùêÄ‚ÇÇ, (8, 12), :; mode=extract)

# compute the Com in a TF region directly from data
Com=comodulation(ùê±‚ÇÅ, ùê±‚ÇÇ, sr, wl, (8, 12), :, bandwidth; mode=extract)

# All these operations can be done also for coherence measures, for example
Coh=coherence(ùêò‚ÇÅ, ùêò‚ÇÇ, (8, 12), :; mode=mean)

Coh=coherence(ùêò‚ÇÅ, ùêò‚ÇÇ, (8, 12), :; mode=extract)

# Compute all 5 coherence types
Coh=coherence(ùêò‚ÇÅ, ùêò‚ÇÇ, (8, 12), :; mode=extract, allkinds=true)

# phase coherence (phase-locking value)
# we obtain this measure from non-linear TFAnalyticSignalVector objects
ùêò‚ÇÅ=TFanalyticsignal(ùê±‚ÇÅ, sr, wl, bandwidth; fmax=32, nonlinear=true)
ùêò‚ÇÇ=TFanalyticsignal(ùê±‚ÇÇ, sr, wl, bandwidth; fmax=32, nonlinear=true)

Coh=coherence(ùêò‚ÇÅ, ùêò‚ÇÇ, (8, 12), :; mode=mean, nonlinear=true)

# or directly from data (no need to worry about non-linearity in this case)
Coh=coherence(ùê±‚ÇÅ, ùê±‚ÇÇ, sr, wl, (8, 12), :, bandwidth; mode=mean, nonlinear=true)

```
"""
comodulation( ùêÄ‚ÇÅ     :: TFAmplitudeVector,
              ùêÄ‚ÇÇ     :: TFAmplitudeVector,
              frange :: fInterval,
              trange :: tInterval;
          mode       :: Function = extract,
          func       :: Function = identity,
          w          :: Vector = [],
          check      :: Bool   = true) =

    if !check || _checkBiData(ùêÄ‚ÇÅ, ùêÄ‚ÇÇ, frange, trange, false, true, "comodulation")
        b(f::Function, g::Function)=
            mean(g(f(ùêÄ‚ÇÅ*ùêÄ‚ÇÇ, frange, trange; w=w, check=check)))
        u(f::Function, g::Function, ùêÄ::TFAmplitudeVector)=
            (mean(g(f(sqr(ùêÄ), frange, trange; w=w, check=check))))
        return b(mode, func) ./ sqrt.(u(mode, func, ùêÄ‚ÇÅ) .* u(mode, func, ùêÄ‚ÇÇ))
    end


comodulation( ùêô‚ÇÅ     :: TFAnalyticSignalVector,
              ùêô‚ÇÇ     :: TFAnalyticSignalVector,
              frange :: fInterval,
              trange :: tInterval;
          mode       :: Function = extract,
          func       :: Function = identity,
          w          :: Vector = [],
          check      :: Bool   = true) =

    if !check || _checkBiData(ùêô‚ÇÅ, ùêô‚ÇÇ, frange, trange, false, true, "comodulation")
        b(f::Function, g::Function)=
            mean(g(f(TFamplitude(ùêô‚ÇÅ)*TFamplitude(ùêô‚ÇÇ), frange, trange; w=w, check=check)))
        u(f::Function, g::Function, ùêô::TFAnalyticSignalVector)=
            (mean(g(f(TFpower(ùêô), frange, trange; w=w, check=check))))
        return b(mode, func) ./ sqrt.(u(mode, func, ùêô‚ÇÅ) .* u(mode, func, ùêô‚ÇÇ))
    end


# NB  if `t` > 2^14 then `t` is set to 2^10.
function comodulation(ùê±‚ÇÅ        :: Vector{Vector{T}},
                      ùê±‚ÇÇ        :: Vector{Vector{T}},
                      sr        :: Int,
                      wl        :: Int,
                      frange    :: fInterval,
                      trange    :: tInterval,
                      bandwidth :: IntOrReal    = 2;
                mode            :: Function     = extract,
                func            :: Function     = identity,
                w               :: Vector       = [],
                filtkind        :: FilterDesign = Butterworth(2),
                fmin            :: IntOrReal    = bandwidth,
                fmax            :: IntOrReal    = sr√∑2,
                fsmoothing      :: Smoother     = noSmoother,
                tsmoothing      :: Smoother     = noSmoother,
                planner         :: Planner      = getplanner,
                ‚è©             :: Bool         = true) where T<:Real

    planner ‚â† getplanner ? plan=planner : plan=Planner(plan_estimate, -1.0, wl, T, true)

    _TFamplitude(ùê±::Vector{Vector{T}}) =
        TFamplitude(ùê±,
                    sr,
                    wl,
                    bandwidth;
                filtkind   = filtkind,
                fmin       = fmin,
                fmax       = fmax,
                fsmoothing = fsmoothing,
                tsmoothing = tsmoothing,
                planner    = plan,
                ‚è©        = ‚è©)

    comodulation(_TFamplitude(ùê±‚ÇÅ),
                 _TFamplitude(ùê±‚ÇÇ),
                 frange,
                 trange;
             mode  = mode,
             func  = func,
             w     = w,
             check = false)
end

com = comodulation



"""
```julia
(5)
function coherence(ùêô‚ÇÅ     :: TFAnalyticSignalVector,
                   ùêô‚ÇÇ     :: TFAnalyticSignalVector,
                   frange :: fInterval,
                   trange :: tInterval;
              nonlinear :: Bool     = false,
              allkinds  :: Bool     = false,
              mode      :: Function = extract,
              func      :: Function = identity,
              w         :: Vector   = [],
              check     :: Bool     = true)

(6)
function coherence(ùê±‚ÇÅ        :: Vector{Vector{T}},
                   ùê±‚ÇÇ        :: Vector{Vector{T}},
                   sr        :: Int,
                   wl        :: Int,
                   frange    :: fInterval,
                   trange    :: tInterval,
                   bandwidth :: IntOrReal = 2;
              nonlinear  :: Bool         = false,
              allkinds   :: Bool         = false,
              mode       :: Function     = extract,
              func       :: Function     = identity,
              w          :: Vector       = [],
              filtkind   :: FilterDesign = Butterworth(2),
              fmin       :: IntOrReal    = bandwidth,
              fmax       :: IntOrReal    = sr√∑2,
              fsmoothing :: Smoother     = noSmoother,
              tsmoothing :: Smoother     = noSmoother,
              planner    :: Planner      = getplanner,
              ‚è©        :: Bool         = true) where T<:Real

```
**alias**: coh

If optional keyword parameter `nonlinear` is false (default),
estimate linear [(weighted) coherence](@ref) measure,
otherwise estimate the the [(weighted) phase concentration](@ref) measure.

If optional keyword argument `allkinds` is true all five
[kinds of coherence](@ref) are returned. In this case the output
is a 5-tuple of `Coherence` matrices, in the order:
- *total* coherence,
- *real* coherence,
- *instantaneous* coherence
- *imaginary* coherence,
- *lagged* coherence.

If `allkinds` is false (default) only the *total* (classical) coherence
is returned as a single `Coherence` matrix.

(5)
The desired measure is obtained averaging across the
[TFAnalyticSignal](@ref) objects in `ùêô`. Since this method uses
pre-computed analytic signal objects, their `.nonlinear` field
must agree with the `nonlinear` argument passed to
this function.

`frange`, `trange`, `w`, `mode` and `func` have the same meaning as
in the [`meanAmplitude`](@ref) function, however keep in mind that
the two possible `mode` functions, i.e.,
[`extract`](@ref) and [`mean`](@ref), in this function operate on
complex numbers.

The checks performed in the [`meanAmplitude`](@ref) function
are performed here too. In addition, if `check` is true, also check that
- if `nonlinear` is true, all objects in `ùêô` are nonlinear;
- if `nonlinear` is false, all objects in `ùêô` are linear.
If either check fails, print an error message and return `Nothing`.

(6)
Estimate the analytic signal of all data vectors in `ùê±` calling the
[`TFanalyticsignal`](@ref) constructor and then use method (5)
to obtained the desired measure.

`frange`, `trange`, `mode`, `func`, `w` and `check` have the same meaning as
in the [`meanAmplitude`](@ref) function.
The other arguments are passed to the [`TFanalyticsignal`](@ref) constructor,
to which the reader is referred for understanding their action.

**See also**: [`meanAmplitude`](@ref), [`meanDirection`](@ref),
[timefrequencybi.jl](@ref).

**Examples**: see the examples of [`comodulation`](@ref) function.
"""
coherence(ùêô‚ÇÅ     :: TFAnalyticSignalVector,
          ùêô‚ÇÇ     :: TFAnalyticSignalVector,
          frange :: fInterval,
          trange :: tInterval;
      nonlinear :: Bool     = false,
      allkinds  :: Bool     = false,
      mode      :: Function = extract,
      func      :: Function = identity,
      w         :: Vector   = [],
      check     :: Bool     = true) =

    if !check || _checkBiData(ùêô‚ÇÅ, ùêô‚ÇÇ, frange, trange, nonlinear, !nonlinear, "coherence with argument nonlinear=$nonlinear")
        ùêô‚ÇÅ‚ÇÇ=ùêô‚ÇÅ*conj(ùêô‚ÇÇ)
        bRe(f::Function, g::Function)=
            power(mean(g(f(real(ùêô‚ÇÅ‚ÇÇ), frange, trange; w=w, check=check))))
        bIm(f::Function, g::Function)=
            power(mean(g(f(imag(ùêô‚ÇÅ‚ÇÇ), frange, trange; w=w, check=check))))
        u(f::Function, g::Function, ùêô::TFAnalyticSignalVector)=
            mean(g(f(TFpower(ùêô), frange, trange; w=w, check=check)))
        reGij=bRe(mode, func)
        imGij=bIm(mode, func)
        if allkinds
            if nonlinear
                reGij isa Number ? uno=1 : uno=ones(eltype(reGij), size(reGij))
                NormC=reGij+imGij
                RealC=reGij
                ImagC=imGij
                InstC=reGij ./ (uno-imGij)
                LaggC=imGij ./ (uno-reGij)
                return [NormC, RealC, ImagC, InstC, LaggC]
            else # linear
                GiGj=u(mode, func, ùêô‚ÇÅ) .* u(mode, func, ùêô‚ÇÇ)
                NormC=(reGij+imGij) ./ GiGj
                RealC=reGij ./ GiGj
                ImagC=imGij ./ GiGj
                InstC=reGij ./ (GiGj-imGij)
                LaggC=imGij ./ (GiGj-reGij)
                return [NormC, RealC, ImagC, InstC, LaggC]
            end
        else # only classical
            return nonlinear ? reGij+imGij :
                              (reGij+imGij) ./ ( u(mode, func, ùêô‚ÇÅ) .* u(mode, func, ùêô‚ÇÇ) )
        end # if allkinds
    end


function coherence(ùê±‚ÇÅ        :: Vector{Vector{T}},
                   ùê±‚ÇÇ        :: Vector{Vector{T}},
                   sr        :: Int,
                   wl        :: Int,
                   frange    :: fInterval,
                   trange    :: tInterval,
                   bandwidth :: IntOrReal = 2;
             nonlinear  :: Bool         = false,
             allkinds   :: Bool         = false,
             mode       :: Function     = extract,
             func       :: Function     = identity,
             w          :: Vector       = [],
             filtkind   :: FilterDesign = Butterworth(2),
             fmin       :: IntOrReal    = bandwidth,
             fmax       :: IntOrReal    = sr√∑2,
             fsmoothing :: Smoother     = noSmoother,
             tsmoothing :: Smoother     = noSmoother,
             planner    :: Planner      = getplanner,
             ‚è©        :: Bool         = true) where T<:Real

    planner ‚â† getplanner ? plan=planner : plan=Planner(plan_estimate, -1.0, wl, T, true)

    _TFanalyticsignal(ùê±::Vector{Vector{T}}) =
        TFanalyticsignal(ùê±,
                         sr,
                         wl,
                         bandwidth;
                     filtkind   = filtkind,
                     fmin       = fmin,
                     fmax       = fmax,
                     fsmoothing = fsmoothing,
                     tsmoothing = tsmoothing,
                     nonlinear  = nonlinear,
                     planner    = plan,
                    ‚è©        = ‚è©)

    coherence(_TFanalyticsignal(ùê±‚ÇÅ),
              _TFanalyticsignal(ùê±‚ÇÇ),
              frange,
              trange;
          nonlinear = nonlinear,
          allkinds  = allkinds,
          mode      = mode,
          func      = func,
          w         = w,
          check     = false)
end

coh=coherence



# Check that:
# - if `frange` is a Colon (:), then the data in all objects in `ùíÄ` and `ùêô` have the same number of rows,
# - if `trange` is a Colon (:), then the data in all objects in `ùíÄ` and `ùêô` have the same number of columns,
# - if `mustBeAllNonLinear` is `true`, then the `nonlinear` field in all objects in `ùíÄ` and `ùêô` is set to `true`,
# - if `mustBeAllLinear` is `true`, then the `nonlinear` field in all objects in `ùíÄ` and `ùêô` is set to `false`.
# Return `true` if all checks are positive, `false` otherwise.
function _checkBiData(ùíÄ::TFobjectsVector, ùêô::TFobjectsVector, frange::fInterval, trange::tInterval,
                       mustBeAllNonLinear::Bool, mustBeAllLinear::Bool, funcname::String)
    OK = true
    frange isa Colon && !_allsame(vcat([size(Y.y, 1) for Y ‚àà ùíÄ], [size(Z.y, 1) for Z ‚àà ùêô])) ?
        (@error üìå*", "*funcname*" function: the number of filter banks is not the same in all input TF objects. Don't use a colon for the `frange` or make sure the input TF objects are of similar size"; OK = false) : nothing
    trange isa Colon && !_allsame(vcat([size(Y.y, 2) for Y ‚àà ùíÄ], [size(Z.y, 2) for Z ‚àà ùêô])) ?
        (@error üìå*", "*funcname*" function: the number of samples is not the same in all input TF objects. Don't use a colon for the `trange` or make sure the input TF objects are of similar size"; OK = false) : nothing
    mustBeAllNonLinear && !isNonLinear(ùíÄ) && !isNonLinear(ùêô) ?
        (@error üìå*", all input TF objects must be nonlinear in order to compute "*funcname; OK = false) : nothing
    mustBeAllLinear && !isLinear(ùíÄ) && !isLinear(ùêô) ?
        (@error üìå*", all input TF objects must be linear in order to compute "*funcname; OK = false) : nothing
    return OK
end


#######################  internal utilities  ##############################
*(Z‚ÇÅ::TFAnalyticSignal, Z‚ÇÇ::TFAnalyticSignal) =
    TFAnalyticSignal(Z‚ÇÅ.y.*Z‚ÇÇ.y, Z‚ÇÅ.bandwidth, Z‚ÇÅ.flabels, Z‚ÇÅ.nonlinear, Z‚ÇÅ.fsmoothing, Z‚ÇÅ.tsmoothing)

*(ùêô‚ÇÅ::TFAnalyticSignalVector, ùêô‚ÇÇ::TFAnalyticSignalVector) =
    TFAnalyticSignalVector([Z‚ÇÅ*Z‚ÇÇ for (Z‚ÇÅ, Z‚ÇÇ) in zip(ùêô‚ÇÅ, ùêô‚ÇÇ)])

*(A‚ÇÅ::TFAmplitude, A‚ÇÇ::TFAmplitude) =
    TFAmplitude(A‚ÇÅ.y.*A‚ÇÇ.y, A‚ÇÅ.bandwidth, A‚ÇÅ.flabels, A‚ÇÅ.fsmoothing, A‚ÇÅ.tsmoothing, A‚ÇÅ.func)

*(ùêÄ‚ÇÅ::TFAmplitudeVector, ùêÄ‚ÇÇ::TFAmplitudeVector) =
    TFAmplitudeVector([A‚ÇÅ*A‚ÇÇ for (A‚ÇÅ, A‚ÇÇ) in zip(ùêÄ‚ÇÅ, ùêÄ‚ÇÇ)])

conj(Z::TFAnalyticSignal) =
    TFAnalyticSignal(conj(Z.y), Z.bandwidth, Z.flabels, Z.nonlinear, Z.fsmoothing, Z.tsmoothing)

conj(ùêô::TFAnalyticSignalVector) = TFAnalyticSignalVector([conj(Z) for Z ‚àà ùêô])

real(Z::TFAnalyticSignal) =
    TFAmplitude(real(Z.y), Z.bandwidth, Z.flabels, Z.fsmoothing, Z.tsmoothing, identity)

real(ùêô::TFAnalyticSignalVector) = TFAmplitudeVector([real(Z) for Z ‚àà ùêô])

imag(Z::TFAnalyticSignal) =
    TFAmplitude(imag(Z.y), Z.bandwidth, Z.flabels, Z.fsmoothing, Z.tsmoothing, identity)

imag(ùêô::TFAnalyticSignalVector) = TFAmplitudeVector([imag(Z) for Z ‚àà ùêô])

#dummy function for internal use only, temporary way to flag that it is not known what function has been applied
unknown()=Nothing

sqr(a)=a^2
sqr(A::TFAmplitude) = TFAmplitude(A.y.^2, A.bandwidth, A.flabels, A.fsmoothing, A.tsmoothing, A.func==identity ? sqr : unknown)
sqr(ùêÄ::TFAmplitudeVector) =  TFAmplitudeVector([sqr(A) for A ‚àà ùêÄ])

power(r::Real)=abs2(r)
power(c::Complex) = abs2(c)
power(Z::AbstractArray{T}) where T<:Real = abs2.(Z)
power(Z::AbstractArray{T}) where T<:Complex = abs2.(Z)

TFpower(Z::TFAnalyticSignal) =
    TFAmplitude(abs2.(Z.y), Z.bandwidth, Z.flabels, Z.fsmoothing, Z.tsmoothing, identity)

TFpower(ùêô::TFAnalyticSignalVector) =
    TFAmplitudeVector([TFpower(Z) for Z ‚àà ùêô])
######################  end internal utilities  ##############################
